{"version":3,"sources":["components/button.js","components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Jumbotron/jumbotron.js","components/Jumbotron/index.js","components/Math.js","components/Utils/APIs.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["button","props","react_default","a","createElement","class","onClick","click","data-value","dataValue","id","title","Col","_ref","size","children","className","split","map","join","Container","fluid","concat","Row","Jumbotron","lead","Math","num1","num2","operator","value","NaN","APIs","addCalculation","calculation","axios","get","then","res","console","log","data","Calculator","state","currentCalc","calculations","calculate","_this","setState","valArr","valIndex","Output","tenCalculationsArray","i","length","parseInt","allCalcs","fullCalculationsArray","tenObjectsArray","slice","currentValue","Calc","clickFunc","e","target","dataset","this","components_button","React","Component","App","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b65e7d2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nlet button = function(props){\r\n\r\n    return (<button class=\"btn btn-primary btn-lg\" onClick = {props.click} data-value  = {props.dataValue} id = \"calcButton\">{props.title}</button>)\r\n}\r\n\r\nexport default button","import React from \"react\";\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n","import React from \"react\";\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n","import React from 'react'\r\n\r\nlet Navbar = function(props){\r\n\r\n\r\nreturn(\r\n\r\n  <div className=\"row\">\r\n    <div className=\"container-fluid\">\r\n      <div className=\"jumbotron\">\r\n        <h5 className=\"display-3\">{props.title}</h5>\r\n        <hr className=\"my-2\"/>\r\n        <p className=\"lead\">{props.lead}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n)}\r\n\r\nexport default Navbar;","import Jumbotron from './jumbotron'\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\n// The Math function component accepts 3 arguments\r\nfunction Math(num1, num2, operator) {\r\n  let value;\r\n\r\n  // Assign value based on the operator\r\n  switch (operator) {\r\n  case \"+\":\r\n    value = num1 + num2;\r\n    break;\r\n  case \"-\":\r\n    value = num1 - num2;\r\n    break;\r\n  case \"*\":\r\n    value = num1 * num2;\r\n    break;\r\n  case \"รท\":\r\n    value = num1 / num2;\r\n    break;\r\n  default:\r\n    value = NaN;\r\n  }\r\n\r\n  //returns a string of the equation including the answer\r\n  return `${num1} ${operator} ${num2} = ${value} `;\r\n}\r\n\r\nexport default Math;\r\n","import axios from 'axios';\r\n\r\nexport default{\r\n    addCalculation: function(calculation){\r\n        return axios.get(\"https://cors-anywhere.herokuapp.com/https://glacial-bayou-59948.herokuapp.com/create/\" + calculation).then( res => {\r\n        console.log(res.data);    \r\n         return res.data\r\n        })\r\n    }\r\n}","import React from \"react\";\r\nimport Button from \"./button\"\r\nimport { Col, Row, Container } from \"./Grid\";\r\nimport Jumbotron from \"./Jumbotron\"\r\nimport Math from \"./Math\";\r\nimport \"./Utils/APIs\";\r\nimport APIs from \"./Utils/APIs\";\r\n\r\n\r\nclass Calculator extends React.Component {\r\n  //state will store the most recent 10 calculations\r\n  //currentCalc is a display state piece that changes as each new character is added\r\n  state = {\r\n    currentCalc : \"\",\r\n    calculations: []\r\n  }\r\n\r\ncalculate = () => {\r\n  this.setState({currentCalc : \"\"})\r\n  let valArr = [\"\",\"\"];\r\n  let operator = \"\"\r\n  let valIndex = 0;\r\n  let Output = \"\";\r\n  let tenCalculationsArray = [];\r\n  for (let i = 0; i < this.state.currentCalc.length; i++){\r\n    if (this.state.currentCalc[i] === \"+\" || \r\n    this.state.currentCalc[i] === \"-\" || \r\n    this.state.currentCalc[i] ===\"*\" ||\r\n    this.state.currentCalc[i] === \"รท\"){\r\n      if (this.state.currentCalc[i-1] === \"+\" || \r\n      this.state.currentCalc[i-1] === \"-\" || \r\n      this.state.currentCalc[i-1] ===\"*\" ||\r\n      this.state.currentCalc[i-1] === \"รท\"){ \r\n\r\n       Output = \"ERROR please input only one operator\";\r\n       return Output;\r\n      }\r\n      valIndex = 1;\r\n      operator = this.state.currentCalc[i];\r\n    }\r\n    else{\r\n      valArr[valIndex] += this.state.currentCalc[i];\r\n      console.log(valArr);\r\n    }\r\n  }\r\n  Output = Math(parseInt(valArr[0]), parseInt(valArr[1]), operator)\r\n  console.log(Output);\r\n   APIs.addCalculation(Output).then(allCalcs =>{\r\n    let fullCalculationsArray = allCalcs;\r\n    console.log(fullCalculationsArray)\r\n    let tenObjectsArray = fullCalculationsArray.slice((fullCalculationsArray.length-10))\r\n    tenCalculationsArray = tenObjectsArray.map((currentValue) => {\r\n      return currentValue.Calc + \", \";\r\n    })\r\n    this.setState({calculations : tenCalculationsArray})\r\n  });\r\n}\r\nclickFunc = (e) => {\r\n  let operator = e.target.dataset.value\r\n    operator === \"=\" ? this.setState ({calculations : this.state.calculations.concat(this.calculate())}) : this.setState({ currentCalc : this.state.currentCalc.concat(operator)})\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <Container>\r\n        <div className=\"mainCalcContainer\">\r\n          <Row>\r\n            <Col size=\"md-5\">\r\n\r\n              <Jumbotron title= {this.state.currentCalc} lead = {this.state.calculations}></Jumbotron>\r\n              <Button title = \"+\"  dataValue = \"+\" click = {this.clickFunc}></Button>\r\n              <Button title=\"-\"dataValue = \"-\"click = {this.clickFunc}></Button>\r\n              <Button title=\"*\"dataValue = \"*\"click = {this.clickFunc}></Button>\r\n              <Button title=\"รท\"dataValue = \"รท\"click = {this.clickFunc}></Button>\r\n              <Button title=\"=\"dataValue = \"=\"click = {this.clickFunc}></Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col size=\"md-5\">\r\n              <Button title=\"1\"dataValue = \"1\"click = {this.clickFunc}></Button>\r\n              <Button title=\"2\"dataValue = \"2\"click = {this.clickFunc}></Button>\r\n              <Button title=\"3\"dataValue = \"3\"click = {this.clickFunc}></Button>\r\n              <Button title=\"4\"dataValue = \"4\"click = {this.clickFunc}></Button>\r\n              <Button title=\"5\"dataValue = \"5\"click = {this.clickFunc}></Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col size=\"md-5\">\r\n              <Button title=\"6\"dataValue = \"6\"click = {this.clickFunc}></Button>\r\n              <Button title=\"7\"dataValue = \"7\"click = {this.clickFunc}></Button>\r\n              <Button title=\"8\"dataValue = \"8\"click = {this.clickFunc}></Button>\r\n              <Button title=\"9\"dataValue = \"9\"click = {this.clickFunc}></Button>\r\n              <Button title=\"0\"dataValue = \"0\"click = {this.clickFunc}></Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}